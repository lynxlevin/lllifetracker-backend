//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    #[sea_orm(unique)]
    pub ambition_id: Option<Uuid>,
    #[sea_orm(unique)]
    pub objective_id: Option<Uuid>,
    #[sea_orm(unique)]
    pub action_id: Option<Uuid>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::action::Entity",
        from = "Column::ActionId",
        to = "super::action::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Action,
    #[sea_orm(
        belongs_to = "super::ambition::Entity",
        from = "Column::AmbitionId",
        to = "super::ambition::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Ambition,
    #[sea_orm(has_many = "super::book_excerpts_tags::Entity")]
    BookExcerptsTags,
    #[sea_orm(has_many = "super::memos_tags::Entity")]
    MemosTags,
    #[sea_orm(has_many = "super::mission_memos_tags::Entity")]
    MissionMemosTags,
    #[sea_orm(
        belongs_to = "super::objective::Entity",
        from = "Column::ObjectiveId",
        to = "super::objective::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Objective,
    #[sea_orm(has_many = "super::record::Entity")]
    Record,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::action::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Action.def()
    }
}

impl Related<super::ambition::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ambition.def()
    }
}

impl Related<super::book_excerpts_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookExcerptsTags.def()
    }
}

impl Related<super::memos_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MemosTags.def()
    }
}

impl Related<super::mission_memos_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MissionMemosTags.def()
    }
}

impl Related<super::objective::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Objective.def()
    }
}

impl Related<super::record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Record.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::book_excerpt::Entity> for Entity {
    fn to() -> RelationDef {
        super::book_excerpts_tags::Relation::BookExcerpt.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::book_excerpts_tags::Relation::Tag.def().rev())
    }
}

impl Related<super::memo::Entity> for Entity {
    fn to() -> RelationDef {
        super::memos_tags::Relation::Memo.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::memos_tags::Relation::Tag.def().rev())
    }
}

impl Related<super::mission_memo::Entity> for Entity {
    fn to() -> RelationDef {
        super::mission_memos_tags::Relation::MissionMemo.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::mission_memos_tags::Relation::Tag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
