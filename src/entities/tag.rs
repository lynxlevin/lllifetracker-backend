//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    #[sea_orm(unique)]
    pub ambition_id: Option<Uuid>,
    pub desired_state_id: Option<Uuid>,
    #[sea_orm(unique)]
    pub action_id: Option<Uuid>,
    pub created_at: DateTimeWithTimeZone,
    pub name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::action::Entity",
        from = "Column::ActionId",
        to = "super::action::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Action,
    #[sea_orm(
        belongs_to = "super::ambition::Entity",
        from = "Column::AmbitionId",
        to = "super::ambition::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Ambition,
    #[sea_orm(
        belongs_to = "super::desired_state::Entity",
        from = "Column::DesiredStateId",
        to = "super::desired_state::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    DesiredState,
    #[sea_orm(has_many = "super::diaries_tags::Entity")]
    DiariesTags,
    #[sea_orm(has_many = "super::reading_notes_tags::Entity")]
    ReadingNotesTags,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::action::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Action.def()
    }
}

impl Related<super::ambition::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ambition.def()
    }
}

impl Related<super::desired_state::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DesiredState.def()
    }
}

impl Related<super::diaries_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DiariesTags.def()
    }
}

impl Related<super::reading_notes_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReadingNotesTags.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::diary::Entity> for Entity {
    fn to() -> RelationDef {
        super::diaries_tags::Relation::Diary.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::diaries_tags::Relation::Tag.def().rev())
    }
}

impl Related<super::reading_note::Entity> for Entity {
    fn to() -> RelationDef {
        super::reading_notes_tags::Relation::ReadingNote.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::reading_notes_tags::Relation::Tag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
