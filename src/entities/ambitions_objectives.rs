//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ambitions_objectives")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub ambition_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub objective_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ambition::Entity",
        from = "Column::AmbitionId",
        to = "super::ambition::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Ambition,
    #[sea_orm(
        belongs_to = "super::objective::Entity",
        from = "Column::ObjectiveId",
        to = "super::objective::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Objective,
}

impl Related<super::ambition::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ambition.def()
    }
}

impl Related<super::objective::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Objective.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
